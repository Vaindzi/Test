#!/usr/bin/env python
# coding: utf-8

# Hola Iv√°n!
# 
# Soy **Patricio Requena** üëã. Es un placer ser el revisor de tu proyecto el d√≠a de hoy!
# 
# Revisar√© tu proyecto detenidamente con el objetivo de ayudarte a mejorar y perfeccionar tus habilidades. Durante mi revisi√≥n, identificar√© √°reas donde puedas hacer mejoras en tu c√≥digo, se√±alando espec√≠ficamente qu√© y c√≥mo podr√≠as ajustar para optimizar el rendimiento y la claridad de tu proyecto. Adem√°s, es importante para m√≠ destacar los aspectos que has manejado excepcionalmente bien. Reconocer tus fortalezas te ayudar√° a entender qu√© t√©cnicas y m√©todos est√°n funcionando a tu favor y c√≥mo puedes aplicarlos en futuras tareas. 
# 
# _**Recuerda que al final de este notebook encontrar√°s un comentario general de mi parte**_, empecemos!
# 
# Encontrar√°s mis comentarios dentro de cajas verdes, amarillas o rojas, ‚ö†Ô∏è **por favor, no muevas, modifiques o borres mis comentarios** ‚ö†Ô∏è:
# 
# 
# <div class="alert alert-block alert-success">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si todo est√° perfecto.
# </div>
# 
# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si tu c√≥digo est√° bien pero se puede mejorar o hay alg√∫n detalle que le hace falta.
# </div>
# 
# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor</b> <a class=‚ÄútocSkip‚Äù></a>
# Si de pronto hace falta algo o existe alg√∫n problema con tu c√≥digo o conclusiones.
# </div>
# 
# Puedes responderme de esta forma:
# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
# </div>

# # Proyecto Integrado Sprint 6

# # Paso 1. Abre el archivo de datos y estudia la informaci√≥n general 

# In[1]:


# importar las librer√≠as
import pandas as pd
import numpy as np
from math import factorial
from scipy import stats as st
import math as mt
from matplotlib import pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import ttest_ind


# In[2]:


# importar el dataset
df = pd.read_csv('/datasets/games.csv')


# In[3]:


# info actual de las primeras 10 filas del df
df.info()


# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con la carga de datos y la importaci√≥n de las librer√≠as necesarias, pero te recomiendo hacer la importaci√≥n de librer√≠as en una celda distinta a la de carga de tus datos
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con los cambios
# </div>

# In[4]:


# info actual de las primeras 10 filas del df
df.describe()


# **Comentarios acerca de los datos:**
# - Los videojuegos en el conjunto de datos fueron lanzados entre 1980 y 2016, con la mayor√≠a lanzados alrededor de 2006.
# 
# - Las ventas son m√°s altas en Am√©rica del Norte que en Estados Unidos y Jap√≥n, lo que sugiere posibles diferencias en preferencias de juego o estrategias de mercado.
# 
# - Las calificaciones cr√≠ticas promedio rondan los 69 sobre 100, pero hay una variabilidad significativa, indicando opiniones diversas sobre la calidad de los juegos.

# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# `.head()` es un muy m√©todo para visualizar tus datos en tu exploraci√≥n inicial, te recomiendo tambi√©n usar `.describe()` y `.info()` para complementarlo.
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Listo! Gracias por la recomendaci√≥n.
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# De nada Iv√°n! Buen trabajo agregando esos dos pasos, de esta forma al inicio de tu proyecto puedes conocer m√°s de tu dataset.
# </div>

# # **Paso 2:** Preparaci√≥n de los datos

# 2.1 Renombrar las columnas a snake case.

# In[5]:


# Un diccionario vac√≠o para almacenar los nuevos nombres de columnas
new_columns = {}

# Bucle for para cambiar los nombres a min√∫sculas
for column in df.columns:
    new_columns[column] = column.lower()
    
# aplicar los nuevos nombres al df
df = df.rename(columns=new_columns)
df.columns


# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Hiciste un buen trabajo! Pero escribir los nombres de las columnas de manera manual puede causar alg√∫n error m√°s adelante, por lo que te recomiendo ponerlo dentro de un bucle y aplicar `.lower()` a los nombres
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Definitivamente qued√≥ mejor con lower y el bucle, menos c√≥digo y menos rango de error que la lista de nombres de columna manual + una funci√≥n. Muchas gracias!
# </div>
# 
# 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente! Buen trabajo con estos cambios
# </div>

# 2.2 Convertir las columnas a los tipos de datos correctos y sustituir los valores ausentes necesarios:

# In[6]:


# Convertir columna critic_score a float usando np.float32
df['critic_score'] = df['critic_score'].astype(np.float32)

# Sustituir 'tbd' por valores ausentes en user_score
df['user_score'] = df['user_score'].replace('tbd', np.nan)

# Convertir user_score a float usando np.float32
df['user_score'] = df['user_score'].astype(np.float32)

# Mostrar nuevamente el df para ver los cambios en los tipos
df.info()


# 2.3 Exploraci√≥n y tratamiento de los valores ausentes.

# In[7]:


# Conteo de los valores ausentes en el df
df.isna().sum()


# In[8]:


# Eliminar valores ausentes solo en la columna 'year_of_release'
df = df.dropna(subset=['year_of_release'])

# Eliminar valores ausentes solo en la columna 'critic_score'
df = df.dropna(subset=['critic_score'])

# Eliminar valores ausentes solo en la columna 'user_score'
df = df.dropna(subset=['user_score'])

# Eliminar valores ausentes solo en la columna 'rating'
df = df.dropna(subset=['rating'])

# Mostrar el nuevo conteo de valores ausentes
df.isna().sum()


# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo Iv√°n! Para este proyecto el eliminar todas las filas que tienen datos ausentes no afect√≥ tu an√°lisis pero habr√°n casos donde no puedas eliminarlos por que son tus columnas de inter√©s. 
#     
# Para esos casos depender√° en que tanto tienes de conocimiento de la fuente de datos puesto que muchas veces sabr√°s la raz√≥n del NaN y podr√°s llenar estos con alg√∫n valor en espec√≠fico, en otros puedes recurrir a llenarlos con la media, mediana, o moda, y en otros c√≥mo aqu√≠ ser√≠a eliminarlos directamente.
#     
# C√≥mo te menciono esto depender√° en que tanto sabes de la fuente de esos datos para poder procesarlos, pero eliminarlos nos puede hacer perder mucha informaci√≥n.
# </div>

# In[9]:


df.info()


# <div class="alert alert-block alert-warning">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Bien hecho! Tambi√©n podr√≠as utilizar la librer√≠a NumPy para esto, por ejemplo, para cambiar el tipo de dato en lugar de float puedes usar `np.float32` y en lugar de None puedes usar `np.nan`
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Listo en el punto 2.2! aunque tengo la duda de cu√°l ser√≠a la ventaja de hacerlo con numpy.
# </div>
# 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Bien hecho Iv√°n. Te explico la diferencia, la ventaja de usar NumPy para establecer tus tipos de datos es que estos utilizan menos memoria y cuando trabajamos con grandes vol√∫menes de datos esto ayudar√° a que el proceso que realices en ellos sea m√°s r√°pido. Por ejemplo, si tenemos una variable que almacena el valor `0.32` en un float de Python este tendr√° un tama√±o de 24 bytes pero si lo cambiamos a np.float32 este se reduce a 4 bytes, ¬øVes la diferencia? Entonces cuado hacemos esto en nuestros DataFrames y tenemos una gran cantidad de datos spbre los cuales vamos a ejecutar varias operaciones esto ser√° mucho m√°s r√°pido.
# </div>

# 2.4 Crear una columna con las ventas totales y cambiar el orden de las columnas para mejorar la legibilidad.

# In[10]:


# sumar las ventas de todas las regiones
df['total_sales'] = df['na_sales'] + df['eu_sales'] + df['jp_sales'] + df['other_sales']

# cambiar el orden de las columnas y comprobar cambios
new_column_order = ['name', 'platform', 'year_of_release', 'genre', 'na_sales', 'eu_sales', 'jp_sales', 'other_sales', 'total_sales', 'critic_score', 'user_score', 'rating']
df = df.reindex(columns=new_column_order)
df.head()


# # **Resumen de la preparaci√≥n de los datos:**
# 
# **Nombre de columnas y tipos de datos:**
# - Se cambi√≥ el nombre de las columnas a snake_case.
# - Se cambi√≥ critic_score de object a float (ya que las otras columnas con puntuaciones o n√∫mero de ventas son float tambi√©n).
# - Se agreg√≥ una columna con las ventas totales de todas las regiones y se cambi√≥ el orden de las columnas para facilitar la lectura del df.
# 
# **Valores ausentes:**
# - Se decidi√≥ dejar los valores ausentes por las siguiente razones:
#     - La cantidad de valores ausentes es significativa en las columnas critic_score y user_score.
#     - Se reemplazaron los valores con tbd por NaN en la columna user_score
#     - Sustituir estos valores por 0 podr√≠a alterar la interpretaci√≥n de los datos. Al igual que ponerlos como "desconocidos" o "tbd".
#     - Mantener los valores ausentes permite que el an√°lisis refleje mejor la informaci√≥n disponible y ayuda a no generar suposiciones inapropiadas sobre los datos.
#     
# **Suposiciones sobre datos ausentes:**
# - Los juegos que no tienen un critic_score ni un user_score no fueron sometidos a ninguna evaluaci√≥n.
# - Pudo haber un error en la recopilaci√≥n de datos de estos juegos.
# - Cuando hay critic_score y "tbd" en user_score, probablemente quiere decir que se cuenta con el dato pero no ha sido cargado.
# 
# 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen resumen, el dejar claro el proceso realizada ayuda a la comprensi√≥n de tu trabajo
# </div>

# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Te recomiendo realizar una exploraci√≥n por valores ausentes y duplicados y que trates de aplicar alguna soluci√≥n en estos si es posible
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Listo en el punto 2.3! Gracias!
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con los cambios!
# </div>

# # **Paso 3: An√°lisis de los datos**

# 3. Sacar el total de lanzamientos de videojuegos por a√±os para ver la distribuci√≥n

# In[11]:


#sacar el total de lanzamientos de videojuegos por a√±o
games_per_year = df.groupby('year_of_release')['name'].count()

# Crear la gr√°fica de barras para mostrar la distribuci√≥n
plt.figure(figsize=(8, 4))
games_per_year.plot(kind='bar', color='skyblue')
plt.title('Total de Lanzamientos de videojuegos por a√±o')
plt.xlabel('A√±o de Lanzamiento')
plt.ylabel('Cantidad de Lanzamientos')
plt.xticks(rotation=65)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()


# **Comentarios sobre lanzamientos de videojuegos calificados por los usuarios y la cr√≠tica por a√±o:**
# - La industria tuvo un crecimiento notorio del a√±o 2000 en adelante
# - A partir de 2009 hubo un nuevo descenso en la tendencia de lanzamiento de juegos

# 3.1 Sacar los a√±os promedio que las plataformas siguen generando ventas (a√±os en que se pierde su popularidad)

# In[12]:


# Sacar el total de a√±os que cada plataforma aparece en el datafrme
platform_years = df.groupby('platform')['year_of_release'].nunique().reset_index()


# In[13]:


# sacar la media de a√±os para calcular cuando una se considera "vieja"
platform_years_mean = platform_years['year_of_release'].mean()
print(f"La media de a√±os que cada plataforma est√° vigente es: {platform_years_mean:.1f}")


# 3.2 Sacar los a√±os promedio que transcurren para que salga una nueva plataforma.

# In[14]:


# sacar el a√±o de lanzamiento de cada plataforma
platform_launch_year = df.groupby('platform')['year_of_release'].min()
# ordenar datos de los a√±os de menor a mayor
platform_launch_year_sorted = platform_launch_year.sort_values()
# calcular el intervalo de a√±os entre una nueva plataforma y la anterior inmediata
interval_of_launch_years = platform_launch_year_sorted.diff()
# calcular la media de a√±os que transucurren entre lanzamientos
interval_of_launch_years_mean = interval_of_launch_years.mean()
print(f"La media de a√±os que transcurren para nuevos lanzamientos de plataformas es: {interval_of_launch_years_mean}")





# **Nota:**
# En adelante, considero importante s√≥lo tomar en cuenta los datos de 2009 en adelante considerando que las consolas tienen una vida media de vida de 8 a√±os.

# 3.3 Obtener las plataformas m√°s populares en los a√±os m√°s relevantes (√∫ltimos  8 a√±os considerando que es el promedio de vigencia de cada plataforma)

# In[15]:


# sumar las ventas totales de cada plataforma
sales_by_platform = df.groupby(['platform', 'year_of_release'])['total_sales'].sum()
sales_by_platform = sales_by_platform.reset_index()
# sacar las 5 plataformas con m√°s ventas en a√±os relevantes
relevant_years = [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016]
top_sales_platforms = sales_by_platform[sales_by_platform['year_of_release'].isin(relevant_years)]
top_sales_platforms = top_sales_platforms.groupby('platform')['total_sales'].sum()
top_sales_platforms = top_sales_platforms.sort_values(ascending=False).reset_index().head(5)

# Crear la gr√°fica de barras
plt.figure(figsize=(4, 3))
plt.bar(top_sales_platforms['platform'], top_sales_platforms['total_sales'], color='skyblue')
plt.title('Top 5 Plataformas con M√°s Ventas Totales')
plt.xlabel('Plataforma')
plt.ylabel('Ventas Totales')
plt.show()


# <div class="alert alert-block alert-danger">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Vas por buen camino! Realizaste los c√°lculos necesarios pero te recomiendo tambi√©n agregar gr√°ficas y conclusiones de lo que vas obteniendo en cada paso
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Agregu√© una gr√°fica para los lanzamientos de videojuegos por a√±o y otra para las 5 plataformas con m√°s ventas, espero sean suficientes :)
# </div>

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo! las gr√°ficas son de gran ayuda cuando queremos comunicar nuestros resultados
# </div>

# 3.4 Mostrar la distribuci√≥n de ventas de las plataformas m√°s populares en los √∫ltimos 8 a√±os

# In[16]:


#hacer un lista de las plataformas con m√°s ventas
top_platforms = ['PS4', 'PS3', 'X360', 'Wii', '3DS']
#filtrar el df con las plataformas top
df_filtrado = df[df['platform'].isin(top_platforms)]
df_filtrado = df_filtrado[df_filtrado['year_of_release'].isin(relevant_years)]
#hacer un dataframe ordenado de menores a mayores ventas
top_platforms_by_sales = df_filtrado.groupby(['platform', 'year_of_release'])['total_sales'].sum().reset_index()
top_platforms_by_sales = top_platforms_by_sales.sort_values(by='total_sales')


# Crear el gr√°fico de barras agrupado y configurar tama√±o
plt.figure(figsize=(10, 5))
sns.barplot(data=top_platforms_by_sales, x='platform', y='total_sales', hue='year_of_release', palette='viridis')

# Agregar t√≠tulo y etiquetas de los ejes
plt.title('Distribuci√≥n de Ventas por Plataforma y A√±o')
plt.xlabel('Plataforma')
plt.ylabel('Ventas Totales (Millonres de d√≥lares EU)')

# Rotar las etiquetas del eje x para mejorar la legibilidad
plt.xticks(rotation=45)

# Mostrar el gr√°fico
plt.legend(title='A√±o', bbox_to_anchor=(1, 1))
plt.show()


# **Conclusiones del gr√°fico de ventas por a√±o y plataforma:**
# - Las plataformas con m√°s ventas fueron el PS3 y el X360
# - El X360, Wii y PS3 son las plataformas con m√°s ventas, aunque el PS3 se mantuvo m√°s estable en cuanto a las mismas m√°s a√±os.
# - Las ventas del Wii fueron las que m√°s decayeron

# 3.5 Sacar las plataformas que eran populares los 3 primeros a√±os del periodo tomado en cuenta.

# In[17]:


# filrar df por a√±os
initial_period_df = df[df['year_of_release'].between(2009, 2013)]
# agrupar por ventas totales
initial_sales_by_platform = initial_period_df.groupby('platform')['total_sales'].sum().sort_values(ascending=False)
# convertir a df y mostrar resultado de las 5 m√°s populares (con m√°s ventas)
initial_sales_df = initial_sales_by_platform.to_frame().reset_index().head(5)
initial_sales_df


# 3.6 Sacar las plataformas que eran populares los √∫ltimos 3 a√±os del periodo tomado en cuenta.

# In[18]:


# filrar df por a√±os
later_period_df = df[df['year_of_release'].between(2014, 2016)]
# agrupar por ventas totales
later_sales_by_platform = later_period_df.groupby('platform')['total_sales'].sum().sort_values(ascending=False)
# agrupar por ventas totales
later_sales_df = later_sales_by_platform.to_frame().reset_index().head(5)
later_sales_df


# **Menciona las plataformas que perdieron popularidad y las conclusiones generales hasta ahora:**
# - Las plataformas que perdieron popularidad fueron el X360, Wii y el PS3, que eran las que tuvieron m√°s ventas.
# - La √∫nicas que siguieron siendo populares fueron 3DS y PC.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo con los c√°lculos y con la conclusi√≥n
# </div>

# 3.7 Crea un diagrama de caja para las ventas globales de todos los juegos, desglosados por plataforma.

# In[19]:


#trazar un diagama de cajas para visualizar la distribuci√≥n de ventas totales por plataforma
sns.boxplot(x = "total_sales", y = "platform", data = top_platforms_by_sales, palette= 'pastel',  saturation = 0.9, linewidth = 1,
           fliersize =8)

plt.xlabel('Ventas totales (Millonres de d√≥lares EU)')
plt.ylabel('Plataforma')
plt.title('Distribuci√≥n de ventas totales de videojuegos por plataforma de 2009 a 2016')
plt.grid(True)
# mostrar el diagrama de caja
plt.tight_layout()
plt.show()


# **Menciona tus hallazgos sobre la distribuci√≥n ventas promedio de cada una de las plataformas seleccionadas:**
# - El X360, el Wii y el PS3 tienen las mayores ventas, pero la mediana de ventas del PS3 y del X360 son mayores a las del Wii, lo que implica que se mantuvieron m√°s estables.
# - El X360 tuvo ventas at√≠picas un a√±o en espec√≠fico.
# - El 3DS y el PS3 son los que tuvieron menos ventas m√≠nimas en el periodo

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Genial! Presentaste el gr√°fico correcto y obtuviste una conclusi√≥n acertada
# </div>

# 3.9 Gr√°fica de dispersi√≥n para calcular relaci√≥n entre rese√±as de usuarios y ventas.

# In[20]:


df_x360 = df[df['platform'] == 'X360']

df_x360_filtered = df_x360[['user_score', 'total_sales']].dropna()

correlation = df_x360_filtered['user_score'].corr(df_x360_filtered['total_sales'])
print(f'la correlaci√≥n entre las rese√±as de usuario y las ventas totales de la pltaforma X360 es de: {correlation:.2f}.')


# In[21]:


plt.figure(figsize=(7, 4))
plt.scatter(df_x360_filtered['user_score'], df_x360_filtered['total_sales'], alpha=0.5)

# Agregar etiquetas y t√≠tulo
plt.title('Relaci√≥n entre rese√±as de usuario y ventas para la plataforma X360')
plt.xlabel('Puntuaci√≥n de usuario')
plt.ylabel('Ventas totales (Millonres de d√≥lares EU)')

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# **Conclusi√≥n sobre la relaci√≥n entre rese√±as de usuario y ventas totales de X360:**
# No existe una relaci√≥n fuerte entre las ventas y las rese√±as.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Vas por buen camino! Mostraste el gr√°fico de dispersi√≥n entre puntuaci√≥n de usuario y ventas de manera correcta

# 3.10 Distribuci√≥n de ventas de videojuegos por g√©nero:

# In[22]:


# Sacar ventas totales de videojuegois ordenadas por g√©nero
sales_by_genre = df.groupby('genre')['total_sales'].sum().reset_index()
# Ordenar de mayor a menor
sales_by_genre = sales_by_genre.sort_values(by='total_sales', ascending=False)
# Resetear el indice
sales_by_genre.reset_index(drop=True, inplace=True)
sales_by_genre


# 3.11 Crear gr√°fico de ventas de vidoejuegos por g√©nero

# In[23]:


# Crear gr√°fico de distribuci√≥n de ventas de videojuegos por g√©nero
sns.barplot(data=sales_by_genre, x='genre', y='total_sales', palette='viridis')

# Agregar t√≠tulo y etiquetas de los ejes
plt.title('Distribuci√≥n de ventas de videojuegos por g√©nero (1980-2016)')
plt.xlabel('Plataforma')
plt.ylabel('Ventas Totales (millonres de d√≥lares EU)')

# Rotar las etiquetas del eje x para mejorar la legibilidad
plt.xticks(rotation=65)

# Mostrar el gr√°fico
plt.show()


# **Conclusiones sobre las ventas de videojuegos por g√©nero:**
# - Los juegos de acci√≥n encabezan la industria
# - Los juegos de deportes y shooters son el segundo lugar y tercer lugar respectivamente, pero s√≥lo representan el ~70% de los juegos de acci√≥n
# - Los juegos de rol, racing y misc tienen ventas similares
# - Los juegos "puzzle", aventura y estrategia son los que menos ventas tienen.
# 
# Tomando en cuenta esta informaci√≥n, s√≠ es f√°cil generalizar sobre los g√©neros que encabezan la industria.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Buen trabajo mostrando tus resultados por g√©nero
# </div>

# 3.12 Ventas de juegos multiplataforma en las plataformas principales:

# In[24]:


# Sacar ventas totales por g√©nero en cada plataforma
sales_by_genre_and_platform = df.groupby(['genre', 'platform'])['total_sales'].sum().reset_index()
# Sacar ventas totales en las mejores plataformas
sales_by_genre_and_platform = sales_by_genre_and_platform[sales_by_genre_and_platform['platform'].isin(top_platforms)]
# Ordenar datos del g√©nero con m√°s ventas al menor
sales_by_genre_and_platform = sales_by_genre_and_platform.sort_values(by='total_sales', ascending=False)

# Crear gr√°fico de distribuci√≥n de ventas de videojuegos por g√©nero y plataforma
plt.figure(figsize=(14,8))
sns.barplot(data=sales_by_genre_and_platform, x='genre', y='total_sales', hue='platform', palette='tab10')
# Agregar t√≠tulo y etiquetas de los ejes
plt.title('Ventas por g√©nero y plataforma en las mejores consolas')
plt.xlabel('G√©nero')
plt.ylabel('Ventas Totales (millonres de d√≥lares EU)')
# Rotar las etiquetas del eje x para mejorar la legibilidad y mostrar el gr√°fico
plt.xticks(rotation=45)
plt.legend(title='Plataforma')
plt.show()





# **Conclusiones principales de los g√©neros de videojuegos en las diferentes plataformas:**
# - Los juegos de acci√≥n, que es el g√©nero con m√°s ventas se vende m√°s en PS3
# - Los shooters se venden m√°s en X360
# - En juegos de deportes y misc y plataforma, Wii es la plataforma que m√°s vende
# - Los shooters se venden m√°s en X360
# 

# # Paso 4. Crea un perfil de usuario para cada regi√≥n

# Para cada regi√≥n (NA, EU, JP) determina:
# 
# - Las cinco plataformas principales. 
# - Describe las variaciones en sus cuotas de mercado de una regi√≥n a otra.
# - Los cinco g√©neros principales. Explica la diferencia.
# - Si las clasificaciones de ESRB afectan a las ventas en regiones individuales.

# 4.1 Sacar las 5 consolas principales en Norte Am√©rica:

# In[25]:


# sacar ventas en las plataformas principales en Norte Am√©rica
top_platforms_na = df.groupby('platform')['na_sales'].sum().reset_index()
# Agrupar de menor a menor
top_platforms_na = top_platforms_na.sort_values(by='na_sales', ascending=False)
top_platforms_na.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_platforms_na.index += 1
# Imprimir ls 5 plataformas principales
top_platforms_na.head(5)


# 4.2 Sacar las 5 consolas principales en EU:

# In[26]:


# sacar ventas en las plataformas principales en EU:
top_platforms_eu = df.groupby('platform')['eu_sales'].sum().reset_index()
# Agrupar de menor a menor
top_platforms_eu = top_platforms_eu.sort_values(by='eu_sales', ascending=False)
top_platforms_eu.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_platforms_eu.index += 1
# Imprimir ls 5 plataformas principales
top_platforms_eu.head(5)


# 4.3 Sacar las 5 consolas principales en Jap√≥n:

# In[27]:


# sacar ventas en las plataformas principales en Jap√≥n:
top_platforms_jp = df.groupby('platform')['jp_sales'].sum().reset_index()
# Agrupar de menor a menor
top_platforms_jp = top_platforms_jp.sort_values(by='jp_sales', ascending=False)
top_platforms_jp.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_platforms_jp.index += 1
# Imprimir ls 5 plataformas principales
top_platforms_jp.head(5)


# 4.4 Unir los dataframes de NA,EU y JP.
# 
# 

# In[28]:


# Hacer una lista con las plataformas que aparecen en el top 5 de cada regi√≥n
platforms_in_dfs = ['X360', 'PS2', 'Wii', 'PS3', 'DS', 'PS', 'SNES', '3DS']
# Unir NA con EU
merged_df = top_platforms_na.merge(top_platforms_eu, on=['platform'], how='outer')
# Unir NA y EU con JP
merged_df_2 = merged_df.merge(top_platforms_jp, on=['platform'], how='outer')
# Filtrar el dataframe para que s√≥lo se consideren el top 5 de plataformas de cada regi√≥n
merged_df_filtered = merged_df_2[merged_df_2['platform'].isin(platforms_in_dfs)]
merged_df_filtered

                      


# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Excelente! Lo hiciste muy bien, y el DataFrame resultante es el correcto ya que muestras todo en una sola tabla
# </div>

# 4.5 Hacer gr√°fico para ver las diferencias en ventas de las plataformas en cada regi√≥n.

# In[29]:


# Hacer un gr√°fico del top 5 plataformas y sus ventas por region para ver diferencia
plt.bar(merged_df_filtered['platform'], merged_df_filtered['na_sales'], color='blue', label='North America')
plt.bar(merged_df_filtered['platform'], merged_df_filtered['eu_sales'], color='green', label='USA', alpha=0.7)
plt.bar(merged_df_filtered['platform'], merged_df_filtered['jp_sales'], color='red', label='Japan', alpha=0.5)

# Configurar etiquetas y leyenda
plt.xlabel('Platforma')
plt.ylabel('Ventas totales (millonres de d√≥lares USA)')
plt.title('Ventas de videojuegos del top 5 de plataformas en Norte Am√©rica, USA y Jap√≥n')
plt.xticks(rotation=45)
plt.legend()

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# 4.6 Hacer gr√°fico de las ventas totales por regi√≥n

# In[30]:


# Configurar el gr√°fico
plt.figure(figsize=(6, 4))

# Obtener las ventas totales por regi√≥n
sales_df = df[['year_of_release', 'na_sales', 'eu_sales', 'jp_sales']]
# Obtener las ventas totales por regi√≥n en a√±os relevantes
total_sales_in_relevant_years = sales_df[sales_df['year_of_release'].isin(relevant_years)][['na_sales', 'eu_sales', 'jp_sales']].sum()

# Crear gr√°fico de distribuci√≥n de ventas de videojuegos por regi√≥n
plt.bar(x=['Norte Am√©rica', 'EU', 'Jap√≥n'], height=total_sales_in_relevant_years, color=['green', 'red', 'blue'])

# Configurar etiquetas y t√≠tulo
plt.xlabel('Region')
plt.ylabel('Ventas totales (millonres de d√≥lares EU)')
plt.title('Distribuci√≥n de ventas totales de videojuegos por regi√≥n de 2010 a 2016')

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# **Conlusiones sobre las ventas de plataformas y ventas totales por regi√≥n:**
# 
# **Popularidad en plataformas**
# - Nort√© Am√©rica y USA tienen b√°sicamente las mismas plataformas como las m√°s populares.
# - 3DS y DS son populares en Jap√≥n.
# 
# **Ventas totales:**
# - Norte Am√©rica vende m√°s videouegos en la mayor√≠a de plataformas y es la regi√≥n con m√°s ventas en general.
# 

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Tus visualizaciones son muy claras y las conclusiones ayudan a enter lo que est√°s mostrando, bien hecho!
# </div>

# 4.7 Sacar los g√©neros principales por regi√≥n.

# In[31]:


# sacar ventas en las plataformas principales en Norte Am√©rica
top_genres_na = df.groupby('genre')['na_sales'].sum().reset_index()
# Agrupar de menor a menor
top_genres_na = top_genres_na.sort_values(by='na_sales', ascending=False)
top_genres_na.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_genres_na.index += 1
# Imprimir ls 5 plataformas principales
top_genres_na.head(5)


# In[32]:


# sacar ventas en las plataformas principales en Norte Am√©rica
top_genres_eu = df.groupby('genre')['eu_sales'].sum().reset_index()
# Agrupar de menor a menor
top_genres_eu = top_genres_eu.sort_values(by='eu_sales', ascending=False)
top_genres_eu.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_genres_eu.index += 1
# Imprimir ls 5 plataformas principales
top_genres_eu.head(5)


# In[33]:


# sacar ventas en las plataformas principales en Norte Am√©rica
top_genres_jp = df.groupby('genre')['jp_sales'].sum().reset_index()
# Agrupar de menor a menor
top_genres_jp = top_genres_jp.sort_values(by='jp_sales', ascending=False)
top_genres_jp.reset_index(drop=True, inplace=True)
# Resetear el indice y hacer que aparezca desde 1
top_genres_jp.index += 1
# Imprimir ls 5 plataformas principales
top_genres_jp.head(5)


# 4.8 Unir los dataframes de ventas por g√©nero de NA, EU y JP.

# In[34]:


# Hacer una lista con los g√©neros que aparecen en el top 5 de cada regi√≥n
genres_in_dfs = ['Action', 'Sports', 'Shooter', 'Platform', 'Misc', 'Racing', 'Role-Playing']
# Unir NA con EU
merged_df_genres = top_genres_na.merge(top_genres_eu, on=['genre'], how='outer')
# Unir NA y EU con JP
merged_df_genres_2 = merged_df_genres.merge(top_genres_jp, on=['genre'], how='outer')
# Filtrar el dataframe para que s√≥lo se consideren el top 5 de plataformas de cada regi√≥n
merged_genres_filtered = merged_df_genres_2[merged_df_genres_2['genre'].isin(genres_in_dfs)]
merged_genres_filtered


# 4.9 Hacer gr√°fico para ver las diferencias en ventas por g√©nero por regi√≥n.

# In[35]:


# Hacer un gr√°fico del top 5 plataformas y sus ventas por region para ver diferencia
plt.bar(merged_genres_filtered['genre'], merged_genres_filtered['na_sales'], color='blue', label='North America')
plt.bar(merged_genres_filtered['genre'], merged_genres_filtered['eu_sales'], color='green', label='EU Sales', alpha=0.7)
plt.bar(merged_genres_filtered['genre'], merged_genres_filtered['jp_sales'], color='red', label='Japan Sales', alpha=0.5)

# Configurar etiquetas y leyenda
plt.xlabel('G√©nero')
plt.ylabel('Ventas totales (millonres de d√≥lares EU)')
plt.title('Top G√©neros de Videojuegos: Norte Am√©rica, EU y Jap√≥n')
plt.xticks(rotation=45)
plt.legend()

# Mostrar el gr√°fico
plt.tight_layout()
plt.show()


# 4.10 Si las clasificaciones de ESRB afectan a las ventas en regiones individuales.

# In[36]:


# 1. Filtrar los datos relevantes
relevant_data = df[['critic_score', 'na_sales', 'eu_sales', 'jp_sales']]

# 2. Limpiar los datos
clean_data = relevant_data.dropna()

# 3. An√°lisis de correlaci√≥n
correlation_na = clean_data['critic_score'].corr(clean_data['na_sales'])
correlation_eu = clean_data['critic_score'].corr(clean_data['eu_sales'])
correlation_jp = clean_data['critic_score'].corr(clean_data['jp_sales'])

print(f"Correlaci√≥n con NA Sales: {correlation_na:.2f}")
print(f"Correlaci√≥n con EU Sales: {correlation_eu:.2f}")
print(f"Correlaci√≥n con JP Sales: {correlation_jp:.2f}")


# In[37]:


# Crear un gr√°fico de dispersi√≥n que muestre la correlaci√≥n entre critic_score y ventas totales por regi√≥n
plt.scatter(clean_data['critic_score'], clean_data['na_sales'], label='NA Sales', alpha=0.5)
plt.scatter(clean_data['critic_score'], clean_data['eu_sales'], label='USA Sales', alpha=0.5)
plt.scatter(clean_data['critic_score'], clean_data['jp_sales'], label='JP Sales', alpha=0.5)
plt.xlabel('Puntaci√≥n de los cr√≠ticos')
plt.ylabel('Ventas totales (millones de d√≥lares EU)')
plt.title('Correlaci√≥n entre la puntuaci√≥n de la cr√≠tica y ventas totales en NA, USA y JP')
plt.legend()
plt.tight_layout()
plt.show()


# **Conlusiones sobre los g√©neros m√°s populares y la relaci√≥n cr√≠tica - ventas totales en NA, EU y JP:**
# 
# **G√©neros:**
# - Los g√©neros de acci√≥n, deportes y disparos son los m√°s populares en NA y USA. Por el contrario, el g√©nero menos popular son los de juegos de rol, sin embargo, los juegos de rol son el g√©nero m√°s popular en Jap√≥n.
# 
# **Relaci√≥n cr√≠tica y ventas totales:**
# - La correlaci√≥n entre la puntuaci√≥n de los cr√≠ticos y las ventas es baja en las regiones deNorte Am√©rica, Estados Unidos y Jap√≥n. Esto sugiere que, aunque existe alguna relaci√≥n entre la calidad percibida de un juego y sus ventas, otros factores pueden tener un impacto m√°s significativo en las decisiones de compra de los consumidores en estos mercados.
# - Norte Am√©rica es donde existe m√°s correlaci√≥n entre cr√≠tica y ventas totales.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Bien hecho Iv√°n! Con esto complementas muy bien tu an√°lisis
# </div>

# # Paso 5. Prueba las siguientes hip√≥tesis:
# 
# ‚Äî Las calificaciones promedio de los usuarios para las plataformas Xbox One y PC son las mismas.
# 
# ‚Äî Las calificaciones promedio de los usuarios para los g√©neros de Acci√≥n y Deportes son diferentes.
# 
# Establece tu mismo el valor de umbral alfa.

# 5.1 Calcular las medias de puntuaciones de usuario de X0ne y PC y su distribuci√≥n:

# In[40]:


# Calcular la media de user_score para X0ne
ratings_xone = df[df['platform'] == 'XOne']['user_score'].reset_index()
ratings_xone = ratings_xone.dropna(subset=['user_score'])

# Calcular la media de user_score para PC
ratings_pc = df[df['platform'] == 'PC']['user_score'].reset_index()
ratings_pc = ratings_pc.dropna(subset=['user_score'])

media_xone = ratings_xone.mean()

# Calcular la media de user_score para la plataforma PC
media_pc = ratings_pc.mean()
            
print("La media de puntuaciones de usuario para XOne es: {:.2f}".format(media_xone[1]))
print("La media de puntuaciones de usuario para PC es: {:.2f}".format(media_pc[1]))


# In[41]:


# Histograma para comparar visualmente la distribuci√≥n de las puntuaciones de usuario en las plataformas X0ne y PC
plt.figure(figsize=(6, 4))

sns.kdeplot(data=ratings_xone['user_score'], label='XOne', shade=True)
sns.kdeplot(data=ratings_pc['user_score'], label='PC', shade=True)

# Agregar etiquetas y t√≠tulo
plt.xlabel('Puntuaci√≥n de usuario')
plt.ylabel('Densidad')
plt.title('Histograma de puntuaciones de usuario en X0ne y PC')
plt.legend()

# Mostrar el histograma
plt.show()


# 5.2 Calcular las varianzas en puntuaciones de usuario de X0ne y PC.

# In[42]:


# Calcular la varianza para XOne
media_xone_var = np.var(ratings_xone)
print("La varianza de puntuaciones promedio de usuario de X0ne es: {:.2f}".format(media_xone_var[1]))


# Calcular la varianza para PC
media_pc_var = np.var(ratings_pc)
print('La varianza de puntuaciones promedio de usuario de PC es: {:.2f}'.format(media_pc_var[1]))


# 5.3 Aplicar prueba estad√≠stica y tomar una decisi√≥n.

# In[48]:


# Realizar la prueba t de Student para muestras independientes
t_statistic, p_value = stats.ttest_ind(ratings_xone['user_score'], ratings_pc['user_score'], equal_var=False)

# Imprimir los resultados
print("Valor estad√≠stico t:", t_statistic)
print("Valor p:", p_value)

# Comparar el valor p con el valor alfa y tomar una decisi√≥n
alpha = 0.05
if p_value < alpha:
    print("Rechazar la hip√≥tesis nula. Las calificaciones promedio de usuarios de XOne son diferentes a las de PC")
else:
    print("No se puede rechazar la hip√≥tesis nula. No hay suficiente evidencia para afirmar que las calificaciones promedio de las plataformas XOne y PC son diferentes.")


# **‚Äî ¬øC√≥mo se formul√≥ las hip√≥tesis nula y alternativa?**
# - La hip√≥tesis nula prueba que las calificaciones entre plataformas son iguales.
# - La hip√≥tesis alternativa probar√≠a una desaigualdad.
# 
# Siendo la hip√≥tesis: ‚Äî Las calificaciones promedio de los usuarios para las plataformas Xbox One y PC son las mismas...La hip√≥tesis nula no se puede rechazar.
# 
# **‚Äî Qu√© criterio utilizaste para probar las hip√≥tesis y por qu√©?**
# 
# **R:** t de student
# - Estamos comparando las medias de dos muestras independientes: en este caso, las calificaciones promedio de los g√©neros de acci√≥n y deportes provienen de dos muestras diferentes y no est√°n relacionadas entre s√≠.
# - Las calificaciones promedio son datos continuos: las calificaciones de usuario, al ser una escala num√©rica del 1 al 10, y esto cumple con el requisito de la prueba t de student.

# 5.4 Calcular las puntuaciones de usuario promedio y su distribuci√≥n de los g√©neros de acci√≥n y deportes.

# In[45]:


# Calcular la media de user_score para X0ne
ratings_action = df[df['genre'] == 'Action']['user_score'].reset_index()
ratings_action = ratings_action.dropna(subset=['user_score'])

# Calcular la media de user_score para PC
ratings_sports = df[df['genre'] == 'Sports']['user_score'].reset_index()
ratings_sports = ratings_sports.dropna(subset=['user_score'])

media_action = ratings_action.mean()

# Calcular la media de user_score para la plataforma PC
media_sports = ratings_sports.mean()
            
print("La media de puntuaciones de usuario para el g√©nero de Acci√≥n es: {:.2f}".format(media_action[1]))
print("La media de puntuaciones de usuario para el g√©nero de Deportes es: {:.2f}".format(media_sports[1]))


# In[53]:


# Histograma para comparar visualmente la distribuci√≥n de las puntuaciones de usuario en los g√©neros acci√≥n y deportes
plt.figure(figsize=(6, 4))

sns.kdeplot(data=ratings_action['user_score'], label='Acci√≥n', shade=True)
sns.kdeplot(data=ratings_sports['user_score'], label='Deportes', shade=True)

# Agregar etiquetas y t√≠tulo
plt.xlabel('Puntuaci√≥n de usuario')
plt.ylabel('Densidad de probabilidad')
plt.title('Histograma de puntuaciones de usuario en videojuegos de acci√≥n y deportes')
plt.legend()

# Mostrar el histograma
plt.show()


# In[51]:


# Calcular la varianza para XOne
media_action_var = np.var(ratings_action)
print("La varianza de puntuaciones promedio de usuario para el g√©nero de Acci√≥n es: {:.2f}".format(media_action_var[1]))


# Calcular la varianza para PC
media_sports_var = np.var(ratings_sports)
print('La varianza de puntuaciones promedio de usuario para el g√©nero de Deportes es: {:.2f}'.format(media_sports_var[1]))


# In[54]:


# Realizar la prueba t de Student para muestras independientes
t_statistic, p_value = stats.ttest_ind(ratings_action['user_score'], ratings_sports['user_score'])

# Imprimir los resultados
print("Valor estad√≠stico t:", t_statistic)
print("Valor p:", p_value)

# Comparar el valor p con el valor alfa y tomar una decisi√≥n
alpha = 0.05
if p_value < alpha:
    print("Rechazar la hip√≥tesis nula. Las calificaciones promedio de usuarios en el g√©nero de acci√≥n son diferentes a las de deportes")
else:
    print("No se puede rechazar la hip√≥tesis nula. No hay suficiente evidencia para afirmar que las calificaciones promedio en los g√©neros de acci√≥n y deportes son diferentes")


# **Conclusi√≥n:**
#  - Siendo la hip√≥tesis: ‚Äî Las calificaciones promedio de los usuarios para los g√©neros de acci√≥n y deportes son las mismas...La hip√≥tesis nula no se puede rechazar.
#  
# **‚Äî Qu√© criterio utilizaste para probar las hip√≥tesis y por qu√©?**
# 
# **R:** t de student
# - Estamos comparando las medias de dos muestras independientes: en este caso, las calificaciones promedio de los g√©neros de acci√≥n y deportes provienen de dos muestras diferentes y no est√°n relacionadas entre s√≠.
# - Las calificaciones promedio son datos continuos: las calificaciones de usuario, al ser una escala num√©rica del 1 al 10, y esto cumple con el requisito de la prueba t de student.

# <div class="alert alert-block alert-success">
# <b>Comentario del revisor (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
# 
# Hiciste una buena aplicaci√≥n de las pruebas de hip√≥tesis y respondiste las preguntas en base a esto de manera adecuado, buen trabajo!
# </div>

# # Paso 6. Escribe una conclusi√≥n general

# **Conclusiones finales del proyecto:**
# - La industria de los videojuegos experiment√≥ un crecimiento notorio de 2000 a 2008, seguido de un declive a partir de 2009. Se observa que nace una nueva plataforma cada 1.7 a√±os y que cada plataforma dura en promedio 8 a√±os teniendo ventas.
# - Las plataformas l√≠deres en ventas son X360 y PS3.
# - Los g√©neros de acci√≥n, deportes y isparos son los m√°s populares en Am√©rica del Norte y Europa, mientras que los juegos de rol lideran en Jap√≥n.
# - Los juegos de acci√≥n se venden m√°s en PS3. Los shoorters se venden m√°s en X360 y los juegos de deportes se venden m√°s en Wii
# - Los juegos de acertijos, aventura y estrategia son los que menos ventas tienen.En juegos de deportes y misc y plataforma, Wii es la plataforma que m√°s vende
# - La correlaci√≥n entre la puntuaci√≥n de los cr√≠ticos y las ventas es baja en general, sugiriendo que otros factores pueden influir m√°s en las decisiones de compra. Sin embargo, en Am√©rica del Norte existe una correlaci√≥n m√°s significativa entre cr√≠tica y ventas totales, aunque sigue sin ser un factor cr√≠tico para las ventas.
# - No podemos estar seguros de que las calificaciones promedio de los usuarios para las plataformas Xbox One y PC sean exactamente iguales.
# - No hay suficiente evidencia para decir que las calificaciones promedio de los juegos de acci√≥n y deportes son diferentes.

# <div class="alert alert-block alert-info">
# <b>Comentario general (1ra Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# 
# Iv√°n se nota tu manejo de las diferentes librer√≠as para llevar a cabo tu proyecto y debo destacar lo ordenado que has presentado tu proyecto, te felicito!
# <br>
# <br>
# Generaste visualizaciones muy buenas y a partir de estas sacaste buenas conclusiones que complementaron tu an√°lisis a la perfecci√≥n.
# <br>
# <br>
# Son peque√±as cosas que hay que corregir por lo que estoy seguro para tu siguiente iteraci√≥n habr√°s completado tu proyecto.
# <br>
# <br>
# Te he dejado mis comentarios a lo largo del proyecto y espero que te sirvan de ayuda para la pr√≥xima iteraci√≥n.
# Un saludo! ü¶æ
# </div>

# <div class="alert alert-block alert-info">
# <b>Respuesta del estudiante</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Gracias por los comments, s√≠ cambiaron un poquito algunos datos tras procesar los valores ausentes desde el inicio, tuve que hacer algunas modificaciones tras ello en los siguientes pasos, pero cambiaron muy poco las conclusiones generales!
#     
# S√≥lo te dejo 2 dudas finales:
# 1. Vi que al tratar los valores ausentes se recort√≥ mucho el DF ¬øno estar√≠amos perdiendo data relevante que podr√≠a ayudar a responder otras dudas si los dejamos? Lo pregunto porque aunque en este caso no cambi√≥ mucho la conclusi√≥n, creo que al tratar los valores ausentes los datos se basaron m√°s en ventas de videojuegos calificados, y no ventas de videojuegos en general.
# 
# 2. ¬øQu√© diferencia hay entre hacer el cambio de tipo de datos a float, etc con Numpy a con Python?
#     
# Muchas gracias por revisar mi proyecto y por los comentarios. Un saludo :)!
# </div>

# <div class="alert alert-block alert-info">
# <b>Comentario general (2da Iteracion)</b> <a class=‚ÄútocSkip‚Äù></a>
#     
# Muy buen trabajo Iv√°n! Adaptaste tu c√≥digo muy bien luego de mis comentarios.
# <br>
# <br>
# En respuesta a tus dudas:
# - Sobre tu duda en Numpy te he dejado una explicaci√≥n justo debajo de tu correcci√≥n que espero te sirva en pr√≥ximos proyectos.
# - Respecto al tratamiento de los valores ausentes igual te dej√© un comentario en ese punto, pero si, tienes raz√≥n en cuanto a que se redujo mucho tu dataset pero a√∫n as√≠ no afect√≥ tus an√°lisis. Cuando nos encontramos con este tipo de casos podemos quitar todas las filas con NaN, o reemplazarlo si conocemos la raz√≥n de esos NaN por ejemplo si tenemos una columna relacionada a contar algo y tenemos NaN eso se debe a que el cont√©o es 0 y podemos llenar esas filas con 0 usando `fillna()`, tambi√©n podemos aplicar t√©cnicas de Data Imputation para llenar estos datos con la media, moda, o mediana pero esto depender√° de que tan bien conozcas la fuente de los datos.
# <br>
# <br>
# Saludos! ü¶æ
# </div>
